# -*- coding: utf-8 -*-
"""Funciones_Graficos_Articulo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0k73Fw0WKzLYkwVIytxCvMia0nzt8fJ
"""

#Apertura de archivo
#https://data.torontopolice.on.ca/datasets/shooting-and-firearm-discharges-open-data/explore

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('/content/Shooting_and_Firearm_Discharges_Open_Data.csv')
data=pd.DataFrame(df)
print(data)

# Funcion 1.
# A. Obtener las tres primeras fechas con mayores muertes registradas.
def obtener_top_muertes_por_fecha(data):
    datos_filtrados = data.loc[data['DEATH'] > 0]
    datos_ordenados = datos_filtrados.sort_values(by=['DEATH'], ascending=False)
    top_muertes = datos_ordenados[['YEAR', 'MONTH', 'DAY','DEATH']].head(3)
    return top_muertes

resultado = obtener_top_muertes_por_fecha(data)
print(resultado)
#Esta funcion toma en cuenta la cantidad de muertes que hubieron durante cada mes del
#anio para luego mostrar los dos meses con mas asesinatos cometidos, de ese mes tambien nos muestra
#el anio y la cantidad de asesinatos.

# Funcion 2.
# B. Saber cuál fue el año con más muertes en el periodo de tiempo de estudio.
def anio_mas_muertes():
    muertes_por_anio = df.groupby('YEAR')['DEATH'].sum()
    anio_con_mas_muertes = muertes_por_anio.idxmax() #Evaluar
    return anio_con_mas_muertes

anio_con_mas_muertes = anio_mas_muertes()
print(f"Anio con mas muertes: {anio_con_mas_muertes}")
#Esta funcion nos imprime el anio con mas muertes totales de todo el periodo.

# Funcion 3.
# C. Obtener los meses con más personas heridas en el año 2005.
def heridos_por_mes_2005():
    heridos_por_mes = df[df['YEAR'] == 2005].groupby('MONTH')['INJURIES'].sum()
    heridos_por_mes = heridos_por_mes.sort_values(ascending=False)
    return heridos_por_mes

heridos_por_mes_2005 = heridos_por_mes_2005()
print(heridos_por_mes_2005)

#Como sabemos tambien gracias a la funcion 1, el anio 2005 fue el anio donde se cometieron los 3 asesinatos
#en Septiembre, por lo tanto queremos saber cuantos heridos hubieron ese anio y que meses sucecieron.

# Funcion 4.
# D. Impresión de los meses en orden descendente en los cuales más altercados ocurrieron de todos los años dentro del periodo.
def contar_meses_desde_anio(data, anio_minimo=2004):
    data_filtrada = data.loc[data['YEAR'] >= anio_minimo]
    conteo_meses = data_filtrada['MONTH'].value_counts()#Evaluar
    return conteo_meses

resultado = contar_meses_desde_anio(data)
print(resultado)
#Es decir, en el ejemplo el mes con mas altercados fue agosto con 604, eso significa
#que en todos los meses de agosto de todos los anios registrados el total de altercados fue ese.

# Funcion 5.
# E. Filtrado por tiempo del dia
def sumar_muertes_y_heridas_2010(data, tiempo):
#¿Cuál será la cantidad de altercados ocurridos en una etapa del día específica en el año 2010?
    data_2010 = data[data['YEAR'] == 2010]

    if tiempo == 'Afternoon':
        data_filtrada = data_2010[(data_2010['TIME_RANGE']) == 'Afternoon' ]
    elif tiempo == 'Evening':
        data_filtrada = data_2010[(data_2010['TIME_RANGE'])== 'Evening']
    elif tiempo == 'Night':
        data_filtrada = data_2010[(data_2010['TIME_RANGE'] ) == 'Night']
    elif tiempo == 'Morning':
        data_filtrada = data_2010[(data_2010['TIME_RANGE'] ) == 'Morning']

    #Calcular la suma de 'DEATH' y 'INJURIES'
    suma_muertes = data_filtrada['DEATH'].sum()
    suma_heridas = data_filtrada['INJURIES'].sum()

    return suma_muertes, suma_heridas

time_range = input("Ingrese un periodo del dia para el filtrado: ")
muertes, heridas = sumar_muertes_y_heridas_2010(data, time_range)
print(f"Para el tiempo '{time_range}' en el año 2010,\nla suma de muertes es {muertes} y la suma de personas heridas es {heridas}.")
#Esta funcion toma el tiempo escrito por el usuario, hace las sumas correspondientes a las muertes y personas heridas
#del año 2010, para retornar los datos encontrados con esas sumas.

# Funcion 6.
# F.	Se sabe el año con más muertes registradas. ¿Pero y el año con más personas heridas y cuantos fueron registrados?
def anio_mas_heridos():
    heridas_por_anio = df.groupby('YEAR')['INJURIES'].sum()
    anio_con_mas_heridos = heridas_por_anio.idxmax()
    total_heridos = heridas_por_anio.max()
    return anio_con_mas_heridos, total_heridos

anio_con_mas_heridos, total_heridos = anio_mas_heridos()
print(f"Anio con mas heridos: {anio_con_mas_heridos}")
print(f"Total de heridos en ese año: {total_heridos}")
#En esta funcion se cuenta el total de personas heridas durante el periodo y
#nos devuelve el anio con mas personas heridas.

#Funcion 7.
#G.	Datos en el mes de septiembre.
def dataSetiembre():
  return data.loc[(data['MONTH']=='September')]

print(dataSetiembre())
#Gracias a la funcion 1, sabemos que Septiembre es el mes con mas asesinatos cometidos,
#por esta razon queremos saber que paso en el mes de Septiembre durante el periodo.

# Funcion 8.
# H. Mes con mas muertes en total en el anio 2005
def mes_mas_muertes_2005(data_2005):
    muertes_por_mes = data_2005.groupby('MONTH')['DEATH'].sum()
    mes_con_mas_muertes_2005 = muertes_por_mes.idxmax()
    return mes_con_mas_muertes_2005

data_2005 = df[df['YEAR'] == 2005]
mes_con_mas_muertes = mes_mas_muertes_2005(data_2005)
print(f"Mes con más muertes en el año 2005: {mes_con_mas_muertes}")

#Tambien nos interesa saber cual fue el mes del anio 2005 con mas muertes totales,
#esta funcion, hace una suma en cada mes, y nos entrega el que mas muertes tuvo.

# Funcion 9.
# I. Imprimir los datos de los acontecimientos ocurridos en el anio 2010.
def data2010():
  return data.loc[(data['YEAR']==2010)]
print(data2010())
#Gracias a la funcion 1, sabemos que otra de las fechas ocurrio en el anio 2010
#por lo tanto queremos ver los datos registrados en ese anio.

# Funcion 10.
# J. Imprimir los datos de los acontecimientos ocurridos en el mes de enero del anio 2010 especificamente.
def data2010_Enero():
  return data.loc[(data['YEAR']==2010) & (data['MONTH']=='January')]
print(data2010_Enero())
#En esta funcion se imprimen los datos del anio 2010 pero esta vez especificamente del mes de Enero
#para saber como comenzo ese anio.

# Grafico 1.
# Promedio Muertes por Barrio.
ciudad_mas_muertes=df.groupby("NEIGHBOURHOOD_158")["DEATH"].mean()
ciudad_mas_muertes.head(10).plot.barh(color="gray")
plt.xlabel('Promedio de Muertes')
plt.ylabel('Barrios')
plt.title('Promedio muertes por Barrio')
plt.show()

# Grafico 2
# Obtener los datos de muertes por tiempo (Mannana/tarde/noche)
DEATH = df['DEATH']
TIME_RANGE = df['TIME_RANGE']
#Crear el histograma
plt.figure(figsize=(10, 6))
plt.hist(TIME_RANGE, bins=10, color='green', edgecolor='black', alpha=0.7)
plt.xlabel('Hora del dia')
plt.ylabel('Cantidad de Muertes')
plt.title('Histograma de Muertes por tiempo (Mannana/tarde/noche)')

# Grafico 3.
# Distribución de Muertes y personas heridas por día de la semana.
total_muertes_por_dia = df.groupby('DOW')['DEATH'].sum()
total_heridos_por_dia = df.groupby('DOW')['INJURIES'].sum()

#Crear el gráfico de pastel
plt.figure(figsize=(5, 5))
plt.pie(total_muertes_por_dia + total_heridos_por_dia, labels=total_muertes_por_dia.index, startangle=140, autopct='%1.1f%%', colors=['lightcoral', 'lightblue', 'lightgreen', 'lightsalmon', 'lightcyan', 'lightyellow', 'lightpink'])

#Título
plt.title('Distribución de muertes y personas heridas por día de la semana')

plt.show()

# Grafico 4.
# Total de muertes y heridos por día de la semana.
total_muertes_por_dia = df.groupby('DOW')['DEATH'].sum()
total_heridos_por_dia = df.groupby('DOW')['INJURIES'].sum()

#Combinar las sumas de 'DEATH' e 'INJURIES'
total_combinado = total_muertes_por_dia + total_heridos_por_dia

#Crear el gráfico de barras
plt.figure(figsize=(7, 5))
total_combinado.plot(kind='bar', color='lightcoral')
plt.xlabel('Día de la semana')
plt.ylabel('Total de muertes y heridos')
plt.title('Total de muertes y heridos por día de la semana')
plt.xticks(rotation=0)  #Para evitar la rotación de las etiquetas en el eje x

plt.show()

# Grafico 5.
# Mapa de Calor de personas heridas por Año y Mes.
meses_ordenados = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

#Crear una tabla dinámica para los datos de INJURIES con el orden personalizado de los meses
pivot_heridos = df.pivot_table(index='YEAR', columns='MONTH', values='INJURIES', aggfunc='sum')
pivot_heridos = pivot_heridos[meses_ordenados]  # Aplicar el orden personalizado

#Crear el mapa de calor para INJURIES
plt.figure(figsize=(8, 6))
sns.heatmap(pivot_heridos, annot=True, cmap="coolwarm", fmt='g', cbar_kws={'label': 'INJURIES'})
plt.title('Mapa de Calor de personas heridos por Año y Mes')
plt.xlabel('Mes')
plt.ylabel('Año')
plt.show()

# Grafico 6.
# Mapa de Calor de muertes por Año y Mes.

#Crear una tabla dinámica para los datos de DEATH con el orden personalizado de los meses
pivot_muertes = df.pivot_table(index='YEAR', columns='MONTH', values='DEATH', aggfunc='sum')
pivot_muertes = pivot_muertes[meses_ordenados]  # Aplicar el orden personalizado

#Crear el mapa de calor para DEATH
plt.figure(figsize=(8, 6))
sns.heatmap(pivot_muertes, annot=True, cmap="coolwarm", fmt='g', cbar_kws={'label': 'DEATH'})
plt.title('Mapa de Calor de muertes por Año y Mes')
plt.xlabel('Mes')
plt.ylabel('Año')
plt.show()