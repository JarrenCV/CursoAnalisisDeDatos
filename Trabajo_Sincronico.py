# -*- coding: utf-8 -*-
"""Primer Avance Proyecto

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0k73Fw0WKzLYkwVIytxCvMia0nzt8fJ
"""

from numba import none
#Apertura de archivo
#https://data.torontopolice.on.ca/datasets/shooting-and-firearm-discharges-open-data/explore

import pandas as pd
import matplotlib.pyplot as plt

#pd.reset_option('all')

pd.set_option('display.max_rows', 12)

df=pd.read_csv('/content/Shooting_and_Firearm_Discharges_Open_Data.csv')
data=pd.DataFrame(df)
print(data)

ciudad_mas_muertes=df.groupby("NEIGHBOURHOOD_158")["DEATH"].mean()
ciudad_mas_muertes.head(10).plot.barh(color="gray")
plt.xlabel('Muertes')
plt.ylabel('Barrios')
plt.title('Promedio muertes por Barrio')
plt.show()

#Funcion 1.
#Las dos fechas con mayores muertes registradas.
def obtener_top_muertes_por_fecha(datos):
    datos_filtrados = datos.loc[datos['DEATH'] > 0]
    datos_ordenados = datos_filtrados.sort_values(by=['DEATH'], ascending=False)
    top_muertes = datos_ordenados[['YEAR', 'MONTH', 'DAY','DEATH']].head(3)
    return top_muertes

resultado = obtener_top_muertes_por_fecha(data)
print(resultado)
#Esta funcion toma en cuenta la cantidad de muertes que hubieron durante cada mes del
#anio para luego mostrar los dos meses con mas asesinatos cometidos, de ese mes tambien nos muestra
#el anio y la cantidad de asesinatos.

#Funcion 2.
#Imprimir los datos del mes de Septiembre de todos los años.
def dataSetiembre():
  return data.loc[(data['MONTH']=='September')]

print(dataSetiembre())
#Gracias a la funcion 1, sabemos que Septiembre es el mes con mas asesinatos cometidos,
#por esta razon queremos saber que paso en el mes de Septiembre durante el periodo.

#Funcion 3.
#Mes con mas heridos en el anio 2005
data_2005 = df[df['YEAR'] == 2005]
def mes_mas_heridos_2005():
    heridos_por_mes = data_2005.groupby('MONTH')['INJURIES'].sum() #Evaluar
    mes_con_mas_heridos = heridos_por_mes.idxmax()
    return mes_con_mas_heridos

mes_con_mas_heridos = mes_mas_heridos_2005()
print(data_2005.sort_values(by=['INJURIES'],ascending=False)[['YEAR', 'MONTH', 'DAY', 'INJURIES']].head(5))
#Como sabemos tambien gracias a la funcion 1, el anio 2005 fue el anio donde se cometieron los 3 asesinatos
#en Septiembre, por lo tanto queremos saber cuantos heridos hubieron ese anio y que meses sucecieron.

#Funcion 4.
# Anio con mas muertes
def anio_mas_muertes():
    muertes_por_anio = df.groupby('YEAR')['DEATH'].sum()
    anio_con_mas_muertes = muertes_por_anio.idxmax() #Evaluar
    return anio_con_mas_muertes

anio_con_mas_muertes = anio_mas_muertes()
print(f"Anio con mas muertes: {anio_con_mas_muertes}")
#Esta funcion nos imprime el anio con mas muertes totales de todo el periodo.

#Funcion 5.
# Mes con mas muertes en total en el anio 2005
data_2005 = df[df['YEAR'] == 2005]

def mes_mas_muertes_2005():

    muertes_por_mes = data_2005.groupby('MONTH')['DEATH'].sum()
    mes_con_mas_muertes_2005 = muertes_por_mes.idxmax()
    return mes_con_mas_muertes_2005

mes_con_mas_muertes = mes_mas_muertes_2005()
print(f"Mes con mas muertes en el anio 2005: {mes_con_mas_muertes}")#Evaluar
#Tambien nos interesa saber cual fue el mes del anio 2005 con mas muertes totales,
#esta funcion, hace una suma en cada mes, y nos entrega el que mas muertes tuvo.

#Funcion 6.
#Imprimir los datos de los acontecimientos ocurridos en el anio 2010.
def data2010():
  return data.loc[(data['YEAR']==2010)]
print(data2010())
#Gracias a la funcion 1, sabemos que otra de las fechas ocurrio en el anio 2010
#por lo tanto queremos ver los datos registrados en ese anio.

#Funcion 7.
#Imprimir los datos de los acontecimientos ocurridos en el mes de enero del anio 2010 especificamente.
def data2010_Enero():
  return data.loc[(data['YEAR']==2010) & (data['MONTH']=='January')]
print(data2010_Enero())
#En esta funcion se imprimen los datos del anio 2010 pero esta vez especificamente del mes de Enero
#para saber como comenzo ese anio.

#Funcion 8.
#Imprime descendentemente el mes en general en el que más altercados ocurrieron de todos los anios.
def contar_meses_desde_anio(data, anio_minimo=2004):
    data_filtrada = data.loc[data['YEAR'] >= anio_minimo]
    conteo_meses = data_filtrada['MONTH'].value_counts()#Evaluar
    return conteo_meses

resultado = contar_meses_desde_anio(data)
print(resultado)
#Es decir, en el ejemplo el mes con mas altercados fue agosto con 604, eso significa
#que en todos los meses de agosto de todos los anios registrados el total de altercados fue ese.

#Funcion 9.
# Anio con mas personas heridas.
def anio_mas_heridos():
    heridas_por_anio = df.groupby('YEAR')['INJURIES'].sum()
    anio_con_mas_heridos = heridas_por_anio.idxmax()
    return anio_con_mas_heridos

anio_con_mas_heridos = anio_mas_heridos()
print(f"Anio con mas heridos: {anio_con_mas_heridos}")
#En esta funcion se cuenta el total de personas heridas durante el periodo y
#nos devuelve el anio con mas personas heridas.

#Funcion 10.
#Filtrado por tiempo del dia
def filtrado_por_time_range(time_range):
    return data.loc[data['TIME_RANGE'] == time_range]

time_range=(input("Ingrese un periodo del dia para el filtrado(Afternoon, Evening, Night)"))
data_filtrada = filtrado_por_time_range(time_range)
print("Filtrado por rango de tiempo",time_range,":")
print(data_filtrada)
#Esta funcion, solicita al usuario en que perido del dia desea ver los datos, y despues
#nos imprime los datos filtrados con lo que el usuario digito.

# Filtrada por tiempo simple
dataTimeRange=data.loc[(data['TIME_RANGE']=='Evening')]
print(dataTimeRange)